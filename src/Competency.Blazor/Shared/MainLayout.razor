@inherits LayoutComponentBase
@inject ProfileService _profileService
@implements IDisposable

<MudThemeProvider Theme="@(_preference.DarkMode ? _darkTheme : _lightTheme)"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="25">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large"/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Typo="Typo.h6" Class="ml-4">MudBlazor.Template</MudText>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.subtitle2">MudBlazor.Template</MudText>
        </MudHidden>
        <MudSpacer/>
        <MudTooltip Text="@(_preference.DarkMode ? "Set Light Mode" : "Set Dark Mode")">
            <MudIconButton Icon="@(_preference.DarkMode ? Icons.Material.Outlined.LightMode : @Icons.Material.Outlined.DarkMode)"
                           Color="Color.Inherit"
                           OnClick="ToggleTheme"/>
        </MudTooltip>
        <LoginDisplay/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="DrawerClipMode.Always">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudToolBar DisableGutters="true">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3"/>
                <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
                <MudSpacer/>
            </MudToolBar>
        </MudHidden>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {

    private bool _drawerOpen = true;
    private Preference _preference = new();
    private readonly LightTheme _lightTheme = new();
    private readonly DarkTheme _darkTheme = new();

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        _profileService.Onchange += ProfileServiceOnChange;
        _preference = await _profileService.GetPreferences();
        StateHasChanged();
    }

    private void ProfileServiceOnChange(Preference preference)
    {
        _preference = preference;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }

    async void ToggleTheme()
    {
        await _profileService.ToggleDarkMode();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Personal", href: "#"),
        new BreadcrumbItem("Dashboard", href: "#"),
    };

    public void Dispose()
    {
        _profileService.Onchange -= ProfileServiceOnChange;
    }

}